http://cymoft.blog.51cto.com/324099/473220/
http://www.cnblogs.com/zhguang/p/3257367.html
http://javarevisited.blogspot.com/2010/10/why-string-is-immutable-in-java.html
http://ibruce.info/2013/12/19/how-to-stop-a-java-thread/



spring
http://www.iflym.com/index.php/code/201208280003.html
http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html#d0e2299
http://blog.richardadamdean.com/?p=49
http://forum.spring.io/forum/spring-projects/container/26615-circular-dependency-solved-by-beanpostprocessor
http://stackoverflow.com/questions/3485347/circular-dependency-in-spring
http://www.mkyong.com/spring-mvc/spring-mvc-form-handling-annotation-example/
http://oss.org.cn/ossdocs/framework/spring/zh-cn/beans.html
http://lwg2001s.iteye.com/blog/1674039


This means that if bean A has a dependency on bean B, the Spring IoC container completely configures bean B prior to invoking the setter method on bean A. In other words, the bean is instantiated (if not a pre-instantiated singleton), its dependencies are set, and the relevant lifecycle methods (such as a configured init method or the IntializingBean callback method) are invoked.

ThreadLocal
http://blog.sina.com.cn/s/blog_79b986cb0101i2er.html
http://www.cnblogs.com/alphablox/archive/2013/01/20/2869061.html
http://www.appneta.com/blog/introduction-to-javas-threadlocal-storage/
http://www.iteye.com/topic/103804
http://redhat.iteye.com/blog/1057974
http://doanduyhai.wordpress.com/2011/12/04/threadlocal-explained/

Even if the Thread is held onto, the ThreadLocal objects are held by weak reference, and can be cleaned up as soon as the ThreadLocal object goes out of scope.
http://www.techques.com/question/1-314332/Which-is-a-better-way-to-force-GC-on-ThreadLocal-instance
A ThreadLocal<Object> is just a key. The actual values are stored in eachThread’s threadLocals weak hash map, which maps weak ThreadLocal to strong Object.

Assume that nobody else holds a reference to the Object in a ThreadLocal. Then there are two ways for the value of a ThreadLocal value to be garbage collected. First, there’s the easy way:

The thread finishes (internally setting its threadLocals map to null).
The garbage collector runs, deleting the Thread’s ThreadLocalMap and all unreachable Objects within it.
But if the thread is still running, then this sequence must happen before your Object can be garbage collected:

You lose all references to the ThreadLocal.
The garbage collector deletes the ThreadLocal.
You set() some number of other ThreadLocals within that thread, and the ThreadLocalMap removes the stale entry from the map. The number needed is nondeterministic because unlike a standard WeakHashMap, the ThreadLocalMap only expunges a few stale entries at a time, and only on set(), not get().
The garbage collector finally deletes the Object.
To mitigate the problem of slow garbage collection, you can call ThreadLocal.remove() from each Thread if that thread doesn’t need the object anymore.

http://jnotnull.iteye.com/blog/429061

多线程http://www.iteye.com/topic/363625
http://www.cnblogs.com/rhythmK/archive/2014/04/27/3694920.html
!!!!!!!!!!!1
http://www.developer.com/design/article.php/10925_3680701_3/Threads-Versus-The-Singleton-Pattern.htm


GC  References to global objects
References to static objects
References to static fields
References on the stack to local objects
References on the stack to object parameters passed to methods
References to objects waiting to be finalized
References in CPU registers to objects on the managed heap
http://javabook.compuware.com/content/memory/how-garbage-collection-works.aspx
http://blog.csdn.net/jiangwei0910410003/article/details/40709457

Therefore, a simple Java application has the following GC roots:

Local variables in the main method
The main thread
Static variables of the main class

finally 
http://www.cnblogs.com/lanxuezaipiao/p/3440471.html
finalized
http://www.cppblog.com/xieshuo/archive/2014/04/09/206514.html

Servlet
http://blog.csdn.net/qfs_v/article/details/2551762
http://www.journaldev.com/2015/servlet-interview-questions-and-answers#http-idempotent-methods
http://www.journaldev.com/1945/servlet-listener-example-servletcontextlistener-httpsessionlistener-and-servletrequestlistener
http://www.journaldev.com/1907/java-servlet-session-management-tutorial-with-examples-of-cookies-httpsession-and-url-rewriting

